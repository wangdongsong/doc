# G1调优相关的虚拟机命令行参数介绍

Hotspot命令行参数的使用有2种格式：

> * 第一种，如果参数的值是布尔类型，就在参数的前面加“+”或“-”表示真或假。例如-XX:+PrintAdaptiveSizePolicy
表示启用PrintAdaptiveSizePolicy，类似-XX:-PrintAdaptiveSizePolicy参数表示禁用该功能。  

> * 第二种，给数值性参数或指定的关键词列表使用的，此类参数不需要加“+”或“-”符号，例如-XX:ConcGCThreads是数值型参数，可直接使用-XX:ConcGCThreads=6。

<strong>特别说明：</strong>以下提到的参数默认值来自JDK8u45版本。  

### -XX:+UseG1GC

启用G1垃圾收集器，JDK7和8中需要显式启用，JDK9默认启用。

### -XX:ConcGCThreads  

设定并行执行GC的Java线程数，默认值近似整个应用线程数的四分之一。  

减少该参数值可能提升并行回收的效率，即提高系统的内部吞吐量（系统是一个整体，大家都需要占用CPU资源），不过数值过低，也会导致并行回收机制耗时加长。  

### -XX:G1HeapRegionSize  

设置G1的每个Region的大小，默认为堆内存大小的1/2000，单位为MB，且数值只能是1、2、4、8、16、32其中之一。  

如果对象大小超过一个Region的一半，G1需要特别管理此类大对象。增大该值，大对象就可以进入Region，对于有很多大对象的应用有助于提高应用性能，缺点是直接干预了各年龄代的分配大小。  

### -XX:G1HeapWastePercent

G1不会回收的内存大小，默认是堆大小的5%。

GC会收集所有的Region，直到剩余的值达到该参数设定的值，就会停止收集。对于大堆来说，需要降低该值。

### -XX:G1MixedGCCountTarget

设置并行循环之后需要有多少个混合GC启动，默认值为8个。  

老年代Region的回收时间通常会比新生代时间长，所以该参数设置允许更多的混合GC同时回收老年代，同样，增大该参数也会增大GC的启动时间。如果混合GC中断应用的时间太长，可以考虑调大该参数。


### -XX:+G1PrintGregionLivenessInfo

该参数需和-XX:+UnlockDiagnosticVMOptions配合启动，它们本身属于VM的调试信息。如果开启，VM会打印堆内存里每个Region的存活对象信息，该信息包含对象的具体使用、可记忆集合大小
以及很价值的GC效率的统计值。不利方面是日志数据会比较大。

### -XX:G1Reservepercent

G1为了保留一些空间用于年代之间的提升，默认值为堆空间的10%。注意这个空间保留后就不会用在年轻代。  

如果应用有比较大的堆内存空间、比较多的大对象存活，建议减少一些保留空间，这样会给年轻代更多的预留空间、GC之间的会有更长的间隔时间，对于性能提升有帮助。


### -XX:+G1SummarizeRSetStats

该参数是虚拟机的诊断调试参数，需要和-XX:+UnlockDiagnosticVMOptions配合启用。如果开启，会在虚拟机退出时打印可记忆集合的详细统计信息。如果和-XX:G1SummarizeRSetStatsPeriod参数配合使用，统计信息会周期性输出。
如果怀疑和可记忆集合有关的问题，应用使用此参数配合分析。

### -XX:G1SummarizeRSetStatsPeriod

该参数是虚拟机的诊断调试参数，需要和-XX:+UnlockDiagnosticVMOptions配合启用，并且只能和-XX:+G1SummarizeRSetStats一起使用。  

该参数设置为非零值n，虚拟机将打印每n次GC后可记忆集合的详细统计信息。GC打印此信息成本较高，周期性打印能分析出可记忆集合的使用趋势。  

### -XX:G1TraceConcRefinement

该参数是虚拟机的诊断调试参数，需要和-XX:+UnlockDiagnosticVMOptions配合启用。

该参数启用后，多线程的并发执行优化的具体信息会被输出到日志信息中。日志会记录多线程并发执行优化的开始和结束，有利于分析多线程并发执行优化导致的问题。  

### -XX:G1UseAdaptiveConcRefinement

该参数默认启用，虚拟机会在每次GC之后动态重新计算-XX:G1ConcRefinementGreenZone、-XX:G1ConcRefinementYellowZone和-XX:G1ConcRefinementRedZone 3个参数的值。

### -XX:GCTimeRatio

GC的某些阶段是stop-the-world，即停止应用线程。该参数是指计算花在Java应用线程和花在GC线程上的时间比率，默认为9。

该参数主要目的是让启用可以控制花在应用上的时间。G1的计算公式：100/(1+GCTimeRatio)，默认值为9，则最多10%的时间花在GC上。


### -XX:+HeapDumpBeforeFullGC

该参数让虚拟机在每次FullGC之前创建hprof文件，文件位于虚拟机的启动目录中。配合-XX:+HeapDumpAfterFullGC参数，可以比较FullGC前后的hprof文件的差异。

### -XX:+HeapDumpAfterFullGC

该参数让虚拟机在每次FullGC之后创建hprof文件，文件位于虚拟机的启动目录中。配合-XX:+HeapDumpBeforeFullGC参数，可以比较FullGC前后的hprof文件的差异。

### -XX:InitiatingHeapOccupancyPercent

G1内部并行循环启动的设置值，默认为堆内存的45%。可以理解为老年代占用的空间，GC收集后要低于45的占用率。  

该值决定在什么时间启动老年代的并行回收循环，该循环从初始化并行回收开始，可以避免FullGC的发生。如果老年代用尽导致FullGC，可调低该值，在更早期启用并行回收循环，避免可用空间用尽。  

如果没有FullGC，可调高该值，减少并行回收循环，提高吞吐量。G1的并发循环需要占用应用程序的CPU来执行回收操作，因此，频繁地并发回收会应用程序的吞吐量。

但是，早启用回收循环要估于晚启动，如果回收循环启动太晚，可能会导致超出估计的冗长GC暂停。  

其它相关信息可参数-XX:+G1UseAdaptiveIHOP

### -XX:+UseStringDeduplication

该参数告诉虚拟机启用字符串去重功能，从JDK8u20开始默认不启用。G1垃圾回收独有。

字符串去重功能利用字符串内部实际的字符数组，当一个字符串的字符序列与另一个字符串的字符序列相等时（string1.equals(string2))，字符串对象会被更新共享同一个字符数组，从而可以降低内存使用，<stong>字符串对象还是不相同的（string1 != string2）</strong>

判断对象是否需要去重，满足以下条件

> * 对象类型是否为字符串（java.lang.String）。
> * 从新生代区移除。
> * 迁移到新生代/幸存区并且对象存活时间达到去重时间的阀值；或迁移到老年代区并且对象存活时间小于去重时间阀值。阀值时间参数-XX:StringDeduplicationAgeThreshold。

### -XX:StringDeduplicationAgeThreshold

该参数设定字符串去重所需要满足的生存时间，生存时间是指该对象存活多少次垃圾回收，默认值为3。

### -X::PrintStringDeduplicationStatistics

该参数启用将会打印字符串去重功能的统计信息，默认为不启用。

启用该特性有助于分析字符串去重功能在节约空间方面是否有效，以决定有没有去重特性。

### -XX:+G1UseAdaptiveIHOP

该参数是JDK9提供的的新特性，自适应的调整参数InitiatingHeapOccupancyPercent设定的IHOP值，上的是为了在确保不撑爆老年代的前提下，尽可能晚启用动老年代循环回收以调高应用的吞吐。JDK9中默认启用。

### -XX:MaxGCPauseMillis

该参数设定G1允许的最大暂停时间目标，单位是毫秒，默认200ms。

**注意：** 该值为期望目标，不是强制规定，该参数尝试通过限制年轻代的大小来实现目标，推荐-Xms、-Xmx一起使用。

### -XX:MinHeapFreeRatio

该参数设定堆中允许空闲的空间最小比例，默认值40，即40%。Hotspot虚拟机利用该参数决定是否增大堆大小，如果G1发现空闲空间低于设定值，就会增大堆空间使得空闲不低于阀值。

**注意：**-Xms和-Xmx必须不同，该特性才有启用的价值。

### -XX:MaxHeapFreeRatio

该参数设定堆中允许空闲的空间最大比例，默认值70，即70%。Hotspot虚拟机利用该参数决定是否需要压缩堆大小，如果空闲空间大于70%，G1就压缩堆大小使得空闲空间不高于阀值。

**注意：**-Xms和-Xmx必须不同，该特性才有启用的价值。

### -xx:PrintAdaptiveSizePolicy

启用堆大小变化的日志输出，有助于理解G1做出的启发式决定。

### -XX:+ResizePLAB

该参数设定是否需要动态调整线程局部提升缓存还是使用固定大小，，默认为动态调整。因有性能问题，生产环境禁用以提高应用吞吐量。

### -XX:+ResizeTLAB


